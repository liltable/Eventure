"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var discord = require("discord.js");
var jsdom_1 = require("jsdom");
var fs = require("fs");
var path = require("path");
var he = require("he");
var highlight_js_1 = require("highlight.js");
var staticTypes = require("./static");
var html_minifier_1 = require("html-minifier");
var twemoji_parser_1 = require("twemoji-parser");
var utils_1 = require("./utils");
var template = fs.readFileSync(path.join(__dirname, 'template.html'), 'utf8');
var version = require('../package.json').version;
var isDJSv14 = discord.version.startsWith('14');
// @ts-ignore
var Attachment = (isDJSv14 ? discord.Attachment : discord.MessageAttachment);
if (!process.env.HIDE_TRANSCRIPT_WARNINGS && isDJSv14)
    console.log('[WARN] discord-html-transcripts was designed to work with v13, but you are using v14. Please note that some bugs may occur.');
// copilot helped so much here
// copilot smart 🧠
function generateTranscript(messages, inputChannel, opts) {
    var _a, _b;
    if (opts === void 0) { opts = { returnType: 'buffer', fileName: 'transcript.html' }; }
    return __awaiter(this, void 0, void 0, function () {
        var channel, dom, document, style, link, guildIcon, transcript, messagesArray, serialized;
        var _this = this;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if ((isDJSv14
                        // @ts-ignore
                        ? inputChannel.type === 1 // djs v14 uses 1 for dm
                        : inputChannel.type === "DM")
                        || inputChannel.isThread())
                        throw new Error("Cannot operate on DM channels or thread channels");
                    channel = inputChannel;
                    dom = new jsdom_1.JSDOM(template.replace('{{TITLE}}', channel.name));
                    document = dom.window.document;
                    style = document.querySelector('style');
                    style.parentNode.removeChild(style);
                    link = document.createElement('link');
                    link.setAttribute('rel', 'stylesheet');
                    link.setAttribute('href', 'https://cdn.jsdelivr.net/npm/discord-html-transcripts@' + (version !== null && version !== void 0 ? version : 'latest') + '/dist/template.css');
                    document.head.appendChild(link);
                    guildIcon = document.getElementsByClassName('preamble__guild-icon')[0];
                    guildIcon.src = (_a = channel.guild.iconURL()) !== null && _a !== void 0 ? _a : staticTypes.defaultPFP;
                    document.getElementById('guildname').textContent = channel.guild.name;
                    document.getElementById('ticketname').textContent = channel.name;
                    document.getElementById('tickettopic').textContent = "This is the start of the #".concat(channel.name, " channel.");
                    if (channel.topic && channel.topic != null) {
                        document.getElementById('tickettopic').innerHTML = "This is the start of the #".concat(he.escape(channel.name), " channel. ").concat(formatContent(channel.topic, channel, false, true));
                    }
                    transcript = document.getElementById('chatlog');
                    messagesArray = (Array.from(messages.values())).sort(function (a, b) { return a.createdTimestamp - b.createdTimestamp; });
                    // Messages
                    return [4 /*yield*/, Promise.all(messagesArray.map(function (message) { return __awaiter(_this, void 0, void 0, function () {
                            var messageGroup, referenceSymbol, reference, referencedMessage, author_1, author, authorElement, authorAvatar, content, authorName, botTag, timestamp, messageContent, link, edited, messageContentContent, messageContentContentMarkdown, messageContentContentMarkdownSpan, edited, _i, _a, attachment, attachmentsDiv, attachmentType, attachmentLink, attachmentImage, _b, _c, attachmentVideo, attachmentAudio, attachmentGeneric, attachmentGenericIcon, attachmentGenericIconUse, attachmentGenericName, attachmentGenericNameLink, attachmentGenericSize, _loop_1, _d, _e, embed, reactionsDiv, _f, _g, reaction, reactionContainer, reactionEmoji, reactionCount;
                            var _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12;
                            return __generator(this, function (_13) {
                                switch (_13.label) {
                                    case 0:
                                        messageGroup = document.createElement('div');
                                        messageGroup.classList.add('chatlog__message-group');
                                        // message reference
                                        if ((_h = message.reference) === null || _h === void 0 ? void 0 : _h.messageId) {
                                            referenceSymbol = document.createElement('div');
                                            referenceSymbol.classList.add('chatlog__reference-symbol');
                                            reference = document.createElement('div');
                                            reference.classList.add('chatlog__reference');
                                            referencedMessage = messages instanceof discord.Collection ? messages.get(message.reference.messageId) : messages.find(function (m) { return m.id === message.reference.messageId; });
                                            author_1 = (_j = referencedMessage === null || referencedMessage === void 0 ? void 0 : referencedMessage.author) !== null && _j !== void 0 ? _j : staticTypes.DummyUser;
                                            reference.innerHTML =
                                                "<img class=\"chatlog__reference-avatar\" src=\"".concat((_k = author_1.avatarURL({ dynamic: true })) !== null && _k !== void 0 ? _k : staticTypes.defaultPFP, "\" alt=\"Avatar\" loading=\"lazy\">\n            <span class=\"chatlog__reference-name\" title=\"").concat(author_1.username.replace(/"/g, ''), "\" style=\"color: ").concat((_l = author_1.hexAccentColor) !== null && _l !== void 0 ? _l : '#FFFFFF', "\">").concat(author_1.bot ? "<span class=\"chatlog__bot-tag\">BOT</span> ".concat(he.escape(author_1.username)) : he.escape(author_1.username), "</span>\n            <div class=\"chatlog__reference-content\">\n                <span class=\"chatlog__reference-link\" onclick=\"scrollToMessage(event, '").concat(message.reference.messageId, "')\">\n                        ").concat(referencedMessage ? ((referencedMessage === null || referencedMessage === void 0 ? void 0 : referencedMessage.content) ? "".concat(formatContent(referencedMessage === null || referencedMessage === void 0 ? void 0 : referencedMessage.content, channel, false, true), "...") : '<em>Click to see attachment</em>') : '<em>Original message was deleted.</em>', "\n                </span>\n            </div>");
                                            messageGroup.appendChild(referenceSymbol);
                                            messageGroup.appendChild(reference);
                                        }
                                        author = (_m = message.author) !== null && _m !== void 0 ? _m : staticTypes.DummyUser;
                                        authorElement = document.createElement('div');
                                        authorElement.classList.add('chatlog__author-avatar-container');
                                        authorAvatar = document.createElement('img');
                                        authorAvatar.classList.add('chatlog__author-avatar');
                                        authorAvatar.src = (_o = author.avatarURL({ dynamic: true })) !== null && _o !== void 0 ? _o : staticTypes.defaultPFP;
                                        authorAvatar.alt = 'Avatar';
                                        authorAvatar.loading = 'lazy';
                                        authorElement.appendChild(authorAvatar);
                                        messageGroup.appendChild(authorElement);
                                        content = document.createElement('div');
                                        content.classList.add('chatlog__messages');
                                        authorName = document.createElement('span');
                                        authorName.classList.add('chatlog__author-name');
                                        authorName.title = he.escape(author.tag);
                                        authorName.textContent = author.username;
                                        authorName.setAttribute('data-user-id', author.id);
                                        authorName.style.color = (_q = (_p = message.member) === null || _p === void 0 ? void 0 : _p.displayHexColor) !== null && _q !== void 0 ? _q : "#ffffff";
                                        content.appendChild(authorName);
                                        if (author.bot) {
                                            botTag = document.createElement('span');
                                            botTag.classList.add('chatlog__bot-tag');
                                            botTag.textContent = (((_r = author.flags) === null || _r === void 0 ? void 0 : _r.has(65536 /* verified bot flag */)) ? '✔ ' : '') + 'BOT';
                                            content.appendChild(botTag);
                                        }
                                        timestamp = document.createElement('span');
                                        timestamp.classList.add('chatlog__timestamp');
                                        timestamp.textContent = message.createdAt.toLocaleString("en-us", staticTypes.timestampShort);
                                        timestamp.title = he.escape(message.createdAt.toLocaleTimeString("en-us", staticTypes.timestampLong));
                                        content.appendChild(timestamp);
                                        messageContent = document.createElement('div');
                                        messageContent.classList.add('chatlog__message');
                                        messageContent.setAttribute('data-message-id', message.id);
                                        messageContent.setAttribute('id', "message-".concat(message.id));
                                        // message content
                                        if (message.content) {
                                            if (validateURL(message.content)) {
                                                link = document.createElement('a');
                                                link.classList.add('chatlog__content');
                                                link.href = message.content;
                                                link.target = '_blank';
                                                link.textContent = message.content;
                                                messageContent.appendChild(link);
                                                if (message.editedTimestamp != null) {
                                                    edited = document.createElement('div');
                                                    edited.classList.add('chatlog__edited');
                                                    edited.textContent = '(edited)';
                                                    messageContent.appendChild(edited);
                                                }
                                            }
                                            else {
                                                messageContentContent = document.createElement('div');
                                                messageContentContent.classList.add('chatlog__content');
                                                messageContentContentMarkdown = document.createElement('div');
                                                messageContentContentMarkdown.classList.add('markdown');
                                                messageContentContentMarkdownSpan = document.createElement('span');
                                                messageContentContentMarkdownSpan.classList.add('preserve-whitespace');
                                                messageContentContentMarkdownSpan.innerHTML = formatContent(message.content, channel, message.webhookId !== null);
                                                messageContentContentMarkdown.appendChild(messageContentContentMarkdownSpan);
                                                messageContentContent.appendChild(messageContentContentMarkdown);
                                                messageContent.appendChild(messageContentContent);
                                                if (message.editedTimestamp != null) {
                                                    edited = document.createElement('div');
                                                    edited.classList.add('chatlog__edited');
                                                    edited.textContent = '(edited)';
                                                    messageContentContentMarkdownSpan.appendChild(edited);
                                                }
                                            }
                                        }
                                        if (!(message.attachments && message.attachments.size > 0)) return [3 /*break*/, 8];
                                        _i = 0, _a = Array.from(message.attachments.values());
                                        _13.label = 1;
                                    case 1:
                                        if (!(_i < _a.length)) return [3 /*break*/, 8];
                                        attachment = _a[_i];
                                        attachmentsDiv = document.createElement('div');
                                        attachmentsDiv.classList.add('chatlog__attachment');
                                        attachmentType = ((_s = attachment.name) !== null && _s !== void 0 ? _s : "unknown.png").split('.').pop().toLowerCase();
                                        if (!['png', 'jpg', 'jpeg', 'gif'].includes(attachmentType)) return [3 /*break*/, 5];
                                        attachmentLink = document.createElement('a');
                                        attachmentImage = document.createElement('img');
                                        attachmentImage.classList.add('chatlog__attachment-media');
                                        _b = attachmentImage;
                                        if (!opts.saveImages) return [3 /*break*/, 3];
                                        return [4 /*yield*/, (0, utils_1.downloadImageToDataURL)((_t = attachment.proxyURL) !== null && _t !== void 0 ? _t : attachment.url)];
                                    case 2:
                                        _c = _13.sent();
                                        return [3 /*break*/, 4];
                                    case 3:
                                        _c = null;
                                        _13.label = 4;
                                    case 4:
                                        _b.src = (_v = (_u = (_c)) !== null && _u !== void 0 ? _u : attachment.proxyURL) !== null && _v !== void 0 ? _v : attachment.url;
                                        attachmentImage.alt = attachment.description ? "Image: ".concat(attachment.description) : 'Image attachment';
                                        attachmentImage.loading = 'lazy';
                                        attachmentImage.title = "Image: ".concat(attachment.name, " (").concat(formatBytes(attachment.size), ")");
                                        attachmentLink.appendChild(attachmentImage);
                                        attachmentsDiv.appendChild(attachmentLink);
                                        return [3 /*break*/, 6];
                                    case 5:
                                        if (['mp4', 'webm'].includes(attachmentType)) {
                                            attachmentVideo = document.createElement('video');
                                            attachmentVideo.classList.add('chatlog__attachment-media');
                                            attachmentVideo.src = (_w = attachment.proxyURL) !== null && _w !== void 0 ? _w : attachment.url;
                                            // attachmentVideo.alt = 'Video attachment';
                                            attachmentVideo.controls = true;
                                            attachmentVideo.title = "Video: ".concat(attachment.name, " (").concat(formatBytes(attachment.size), ")");
                                            attachmentsDiv.appendChild(attachmentVideo);
                                        }
                                        else if (['mp3', 'ogg'].includes(attachmentType)) {
                                            attachmentAudio = document.createElement('audio');
                                            attachmentAudio.classList.add('chatlog__attachment-media');
                                            attachmentAudio.src = (_x = attachment.proxyURL) !== null && _x !== void 0 ? _x : attachment.url;
                                            // attachmentAudio.alt = 'Audio attachment';
                                            attachmentAudio.controls = true;
                                            attachmentAudio.title = "Audio: ".concat(attachment.name, " (").concat(formatBytes(attachment.size), ")");
                                            attachmentsDiv.appendChild(attachmentAudio);
                                        }
                                        else {
                                            attachmentGeneric = document.createElement('div');
                                            attachmentGeneric.classList.add('chatlog__attachment-generic');
                                            attachmentGenericIcon = document.createElement('svg');
                                            attachmentGenericIcon.classList.add('chatlog__attachment-generic-icon');
                                            attachmentGenericIconUse = document.createElement('use');
                                            attachmentGenericIconUse.setAttribute('href', '#icon-attachment');
                                            attachmentGenericIcon.appendChild(attachmentGenericIconUse);
                                            attachmentGeneric.appendChild(attachmentGenericIcon);
                                            attachmentGenericName = document.createElement('div');
                                            attachmentGenericName.classList.add('chatlog__attachment-generic-name');
                                            attachmentGenericNameLink = document.createElement('a');
                                            attachmentGenericNameLink.href = (_y = attachment.proxyURL) !== null && _y !== void 0 ? _y : attachment.url;
                                            attachmentGenericNameLink.textContent = attachment.name;
                                            attachmentGenericName.appendChild(attachmentGenericNameLink);
                                            attachmentGeneric.appendChild(attachmentGenericName);
                                            attachmentGenericSize = document.createElement('div');
                                            attachmentGenericSize.classList.add('chatlog__attachment-generic-size');
                                            attachmentGenericSize.textContent = "".concat(formatBytes(attachment.size));
                                            attachmentGeneric.appendChild(attachmentGenericSize);
                                            attachmentsDiv.appendChild(attachmentGeneric);
                                        }
                                        _13.label = 6;
                                    case 6:
                                        messageContent.appendChild(attachmentsDiv);
                                        _13.label = 7;
                                    case 7:
                                        _i++;
                                        return [3 /*break*/, 1];
                                    case 8:
                                        content.appendChild(messageContent);
                                        // embeds
                                        if (message.embeds && message.embeds.length > 0) {
                                            _loop_1 = function (embed) {
                                                var _14;
                                                var embedDiv = document.createElement('div');
                                                embedDiv.classList.add('chatlog__embed');
                                                // embed color
                                                if (embed.hexColor) {
                                                    var embedColorPill = document.createElement('div');
                                                    embedColorPill.classList.add('chatlog__embed-color-pill');
                                                    embedColorPill.style.backgroundColor = embed.hexColor;
                                                    embedDiv.appendChild(embedColorPill);
                                                }
                                                var embedContentContainer = document.createElement('div');
                                                embedContentContainer.classList.add('chatlog__embed-content-container');
                                                var embedContent = document.createElement('div');
                                                embedContent.classList.add('chatlog__embed-content');
                                                var embedText = document.createElement('div');
                                                embedText.classList.add('chatlog__embed-text');
                                                // embed author
                                                if ((_z = embed.author) === null || _z === void 0 ? void 0 : _z.name) {
                                                    var embedAuthor = document.createElement('div');
                                                    embedAuthor.classList.add('chatlog__embed-author');
                                                    if (embed.author.iconURL) {
                                                        var embedAuthorIcon_1 = document.createElement('img');
                                                        embedAuthorIcon_1.classList.add('chatlog__embed-author-icon');
                                                        embedAuthorIcon_1.src = embed.author.iconURL;
                                                        embedAuthorIcon_1.alt = 'Author icon';
                                                        embedAuthorIcon_1.loading = 'lazy';
                                                        embedAuthorIcon_1.onerror = function () { return embedAuthorIcon_1.style.visibility = 'hidden'; };
                                                        embedAuthor.appendChild(embedAuthorIcon_1);
                                                    }
                                                    var embedAuthorName = document.createElement('span');
                                                    embedAuthorName.classList.add('chatlog__embed-author-name');
                                                    if (embed.author.url) {
                                                        var embedAuthorNameLink = document.createElement('a');
                                                        embedAuthorNameLink.classList.add('chatlog__embed-author-name-link');
                                                        embedAuthorNameLink.href = embed.author.url;
                                                        embedAuthorNameLink.textContent = embed.author.name;
                                                        embedAuthorName.appendChild(embedAuthorNameLink);
                                                    }
                                                    else {
                                                        embedAuthorName.textContent = embed.author.name;
                                                    }
                                                    embedAuthor.appendChild(embedAuthorName);
                                                    embedText.appendChild(embedAuthor);
                                                }
                                                // embed title
                                                if (embed.title) {
                                                    var embedTitle = document.createElement('div');
                                                    embedTitle.classList.add('chatlog__embed-title');
                                                    if (embed.url) {
                                                        var embedTitleLink = document.createElement('a');
                                                        embedTitleLink.classList.add('chatlog__embed-title-link');
                                                        embedTitleLink.href = embed.url;
                                                        var embedTitleMarkdown = document.createElement('div');
                                                        embedTitleMarkdown.classList.add('markdown', 'preserve-whitespace');
                                                        embedTitleMarkdown.textContent = embed.title;
                                                        embedTitleLink.appendChild(embedTitleMarkdown);
                                                        embedTitle.appendChild(embedTitleLink);
                                                    }
                                                    else {
                                                        var embedTitleMarkdown = document.createElement('div');
                                                        embedTitleMarkdown.classList.add('markdown', 'preserve-whitespace');
                                                        embedTitleMarkdown.textContent = embed.title;
                                                        embedTitle.appendChild(embedTitleMarkdown);
                                                    }
                                                    embedText.appendChild(embedTitle);
                                                }
                                                // embed description
                                                if (embed.description) {
                                                    var embedDescription = document.createElement('div');
                                                    embedDescription.classList.add('chatlog__embed-description');
                                                    var embedDescriptionMarkdown = document.createElement('div');
                                                    embedDescriptionMarkdown.classList.add('markdown', 'preserve-whitespace');
                                                    embedDescriptionMarkdown.innerHTML = formatContent(embed.description, channel, true);
                                                    embedDescription.appendChild(embedDescriptionMarkdown);
                                                    embedText.appendChild(embedDescription);
                                                }
                                                // embed fields
                                                if (embed.fields && embed.fields.length > 0) {
                                                    var embedFields = document.createElement('div');
                                                    embedFields.classList.add('chatlog__embed-fields');
                                                    for (var _15 = 0, _16 = embed.fields; _15 < _16.length; _15++) {
                                                        var field = _16[_15];
                                                        var embedField = document.createElement('div');
                                                        (_14 = embedField.classList).add.apply(_14, (!field.inline ? ['chatlog__embed-field'] : ['chatlog__embed-field', 'chatlog__embed-field--inline']));
                                                        // Field name
                                                        var embedFieldName = document.createElement('div');
                                                        embedFieldName.classList.add('chatlog__embed-field-name');
                                                        var embedFieldNameMarkdown = document.createElement('div');
                                                        embedFieldNameMarkdown.classList.add('markdown', 'preserve-whitespace');
                                                        embedFieldNameMarkdown.textContent = field.name;
                                                        embedFieldName.appendChild(embedFieldNameMarkdown);
                                                        embedField.appendChild(embedFieldName);
                                                        // Field value
                                                        var embedFieldValue = document.createElement('div');
                                                        embedFieldValue.classList.add('chatlog__embed-field-value');
                                                        var embedFieldValueMarkdown = document.createElement('div');
                                                        embedFieldValueMarkdown.classList.add('markdown', 'preserve-whitespace');
                                                        embedFieldValueMarkdown.innerHTML = formatContent(field.value, channel, true);
                                                        embedFieldValue.appendChild(embedFieldValueMarkdown);
                                                        embedField.appendChild(embedFieldValue);
                                                        embedFields.appendChild(embedField);
                                                    }
                                                    embedText.appendChild(embedFields);
                                                }
                                                embedContent.appendChild(embedText);
                                                // embed thumbnail
                                                if ((_1 = (_0 = embed.thumbnail) === null || _0 === void 0 ? void 0 : _0.proxyURL) !== null && _1 !== void 0 ? _1 : (_2 = embed.thumbnail) === null || _2 === void 0 ? void 0 : _2.url) {
                                                    var embedThumbnail = document.createElement('div');
                                                    embedThumbnail.classList.add('chatlog__embed-thumbnail-container');
                                                    var embedThumbnailLink = document.createElement('a');
                                                    embedThumbnailLink.classList.add('chatlog__embed-thumbnail-link');
                                                    embedThumbnailLink.href = (_3 = embed.thumbnail.proxyURL) !== null && _3 !== void 0 ? _3 : embed.thumbnail.url;
                                                    var embedThumbnailImage = document.createElement('img');
                                                    embedThumbnailImage.classList.add('chatlog__embed-thumbnail');
                                                    embedThumbnailImage.src = (_4 = embed.thumbnail.proxyURL) !== null && _4 !== void 0 ? _4 : embed.thumbnail.url;
                                                    embedThumbnailImage.alt = 'Thumbnail';
                                                    embedThumbnailImage.loading = 'lazy';
                                                    embedThumbnailLink.appendChild(embedThumbnailImage);
                                                    embedThumbnail.appendChild(embedThumbnailLink);
                                                    embedContent.appendChild(embedThumbnail);
                                                }
                                                embedContentContainer.appendChild(embedContent);
                                                // embed image
                                                if (embed.image) {
                                                    var embedImage = document.createElement('div');
                                                    embedImage.classList.add('chatlog__embed-image-container');
                                                    var embedImageLink = document.createElement('a');
                                                    embedImageLink.classList.add('chatlog__embed-image-link');
                                                    embedImageLink.href = (_5 = embed.image.proxyURL) !== null && _5 !== void 0 ? _5 : embed.image.url;
                                                    var embedImageImage = document.createElement('img');
                                                    embedImageImage.classList.add('chatlog__embed-image');
                                                    embedImageImage.src = (_6 = embed.image.proxyURL) !== null && _6 !== void 0 ? _6 : embed.image.url;
                                                    embedImageImage.alt = 'Image';
                                                    embedImageImage.loading = 'lazy';
                                                    embedImageLink.appendChild(embedImageImage);
                                                    embedImage.appendChild(embedImageLink);
                                                    embedContentContainer.appendChild(embedImage);
                                                }
                                                // footer
                                                if ((_7 = embed.footer) === null || _7 === void 0 ? void 0 : _7.text) {
                                                    var embedFooter = document.createElement('div');
                                                    embedFooter.classList.add('chatlog__embed-footer');
                                                    if (embed.footer.iconURL) {
                                                        var embedFooterIcon = document.createElement('img');
                                                        embedFooterIcon.classList.add('chatlog__embed-footer-icon');
                                                        embedFooterIcon.src = (_8 = embed.footer.proxyIconURL) !== null && _8 !== void 0 ? _8 : embed.footer.iconURL;
                                                        embedFooterIcon.alt = 'Footer icon';
                                                        embedFooterIcon.loading = 'lazy';
                                                        embedFooter.appendChild(embedFooterIcon);
                                                    }
                                                    var embedFooterText = document.createElement('span');
                                                    embedFooterText.classList.add('chatlog__embed-footer-text');
                                                    embedFooterText.textContent = embed.timestamp ? "".concat(embed.footer.text, " \u2022 ").concat(new Date(embed.timestamp).toLocaleString()) : embed.footer.text;
                                                    embedFooter.appendChild(embedFooterText);
                                                    embedContentContainer.appendChild(embedFooter);
                                                }
                                                embedDiv.appendChild(embedContentContainer);
                                                content.appendChild(embedDiv);
                                            };
                                            for (_d = 0, _e = message.embeds; _d < _e.length; _d++) {
                                                embed = _e[_d];
                                                _loop_1(embed);
                                            }
                                        }
                                        // reactions
                                        if (message.reactions.cache.size > 0) {
                                            reactionsDiv = document.createElement('div');
                                            reactionsDiv.classList.add('chatlog__reactions');
                                            for (_f = 0, _g = Array.from(message.reactions.cache.values()); _f < _g.length; _f++) {
                                                reaction = _g[_f];
                                                reactionContainer = document.createElement('div');
                                                reactionContainer.classList.add('chatlog__reaction');
                                                reactionContainer.title = (_10 = (_9 = reaction.emoji.name) !== null && _9 !== void 0 ? _9 : reaction.emoji.id) !== null && _10 !== void 0 ? _10 : 'Unknown';
                                                reactionEmoji = document.createElement('img');
                                                reactionEmoji.classList.add('emoji', 'emoji--small');
                                                reactionEmoji.alt = (_12 = (_11 = reaction.emoji.name) !== null && _11 !== void 0 ? _11 : reaction.emoji.id) !== null && _12 !== void 0 ? _12 : reaction.emoji.identifier;
                                                if (reaction.emoji.url) {
                                                    reactionEmoji.src = reaction.emoji.url;
                                                }
                                                else if (reaction.emoji.name) {
                                                    // console.log(reaction.emoji.identifier, reaction.emoji.name, reaction.emoji.id);
                                                    reactionEmoji.src = (0, twemoji_parser_1.parse)(reaction.emoji.name)[0].url;
                                                }
                                                else {
                                                    // reactionEmoji.src = `https://twemoji.maxcdn.com/2/svg/${reaction.emoji.id}.svg`;
                                                    console.warn("[discord-html-transcripts] [WARN] Failed to parse reaction emoji:", reaction.emoji);
                                                }
                                                reactionCount = document.createElement('span');
                                                reactionCount.classList.add('chatlog__reaction-count');
                                                reactionCount.textContent = reaction.count.toString();
                                                reactionContainer.appendChild(reactionEmoji);
                                                reactionContainer.appendChild(reactionCount);
                                                reactionsDiv.appendChild(reactionContainer);
                                            }
                                            content.appendChild(reactionsDiv);
                                        }
                                        messageGroup.appendChild(content);
                                        transcript.appendChild(messageGroup);
                                        return [2 /*return*/];
                                }
                            });
                        }); }))];
                case 1:
                    // Messages
                    _c.sent();
                    serialized = dom.serialize();
                    try {
                        if (opts.minify)
                            serialized = (0, html_minifier_1.minify)(serialized, staticTypes.MINIFY_OPTIONS);
                    }
                    catch (error) {
                        console.error("[discord-html-transcripts] [ERROR] Failed to minify: ", error);
                    }
                    if (opts.returnType === "string")
                        return [2 /*return*/, serialized];
                    if (opts.returnType === "buffer")
                        return [2 /*return*/, Buffer.from(serialized)];
                    if (opts.returnType === "attachment")
                        return [2 /*return*/, new Attachment(Buffer.from(serialized), (_b = opts.fileName) !== null && _b !== void 0 ? _b : 'transcript.html')];
                    // should never get here.
                    return [2 /*return*/, serialized];
            }
        });
    });
}
var languages = highlight_js_1.default.listLanguages();
function formatContent(content, context, allowExtra, replyStyle, purify) {
    if (allowExtra === void 0) { allowExtra = false; }
    if (replyStyle === void 0) { replyStyle = false; }
    if (purify === void 0) { purify = he.escape; }
    var emojiClass = /^(<(a?):([^:]+?):(\d+?)>([ \t]+?)?){0,27}$/.test(content)
        ? "emoji--large" : "emoji--small";
    content = purify(content)
        .replace(/\&\#x60;/g, '`') // we dont want ` to be escaped
        .replace(/```(.+?)```/gs, function (code) {
        var _a;
        if (!replyStyle) {
            var split = code.slice(3, -3).split('\n');
            var language = ((_a = split.shift()) !== null && _a !== void 0 ? _a : "").trim().toLowerCase();
            if (language in staticTypes.LanguageAliases)
                language = staticTypes.LanguageAliases[language];
            if (languages.includes(language)) {
                var joined = he.unescape(split.join("\n"));
                return "<div class=\"pre pre--multiline language-".concat(language, "\">").concat(highlight_js_1.default.highlight(joined, {
                    language: language,
                }).value, "</div>");
            }
            else {
                return "<div class=\"pre pre--multiline nohighlight\">".concat(code
                    .slice(3, -3)
                    .trim(), "</div>");
            }
        }
        else {
            var split = code.slice(3, -3).split('\n');
            split.shift();
            var joined = he.unescape(split.join('\n'));
            return "<span class=\"pre pre--inline\">".concat(joined.substring(0, 42), "</span>");
        }
    })
        .replace(/\&lt\;a:(.+?):(\d+?)\&gt\;/g, function (_content, _name, id) { return "<img src=\"https://cdn.discordapp.com/emojis/".concat(id, ".gif?size=96\" class=\"emoji ").concat(emojiClass, "\">"); })
        .replace(/\&lt\;:(.+?):(\d+?)\&gt\;/g, function (_content, _name, id) { return "<img src=\"https://cdn.discordapp.com/emojis/".concat(id, ".webp?size=96\" class=\"emoji ").concat(emojiClass, "\">"); })
        .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.+?)\*/g, '<em>$1</em>')
        .replace(/~~(.+?)~~/g, '<s>$1</s>')
        .replace(/__(.+?)__/g, '<u>$1</u>')
        .replace(/\_(.+?)\_/g, '<em>$1</em>')
        .replace(/`(.+?)`/g, "<span class=\"pre pre--inline\">$1</span>")
        .replace(/\|\|(.+?)\|\|/g, "<span class=\"spoiler-text spoiler-text--hidden\" ".concat(replyStyle ? '' : 'onclick="showSpoiler(event, this)"', ">$1</span>"))
        .replace(/\&lt\;@!*&*([0-9]{16,20})\&gt\;/g, function (user) {
        var _a, _b, _c, _d, _e;
        var userId = ((_a = user.match(/[0-9]{16,20}/)) !== null && _a !== void 0 ? _a : [""])[0];
        var userInGuild = (_c = (_b = context.client) === null || _b === void 0 ? void 0 : _b.users) === null || _c === void 0 ? void 0 : _c.resolve(userId);
        return "<span class=\"mention\" title=\"".concat((_d = userInGuild === null || userInGuild === void 0 ? void 0 : userInGuild.tag) !== null && _d !== void 0 ? _d : userId, "\">@").concat((_e = userInGuild === null || userInGuild === void 0 ? void 0 : userInGuild.username) !== null && _e !== void 0 ? _e : "Unknown User", "</span>");
    })
        .replace(/\&lt\;#!*&*([0-9]{16,20})\&gt\;/g, function (channel) {
        var _a, _b, _c;
        var channelId = ((_a = channel.match(/[0-9]{16,20}/)) !== null && _a !== void 0 ? _a : [""])[0];
        var channelInGuild = context.guild.channels.resolve(channelId);
        var pre = channelInGuild ? channelInGuild.isText() ? '#' : channelInGuild.isVoice() ? '🔊' : '📁' : "#";
        return "<span class=\"mention\" title=\"".concat((_b = channelInGuild === null || channelInGuild === void 0 ? void 0 : channelInGuild.name) !== null && _b !== void 0 ? _b : channelId, "\">").concat(pre).concat((_c = channelInGuild === null || channelInGuild === void 0 ? void 0 : channelInGuild.name) !== null && _c !== void 0 ? _c : "Unknown Channel", "</span>");
    })
        .replace(/\&lt\;\@\&amp\;([0-9]{16,20})\&gt\;/g, function (channel) {
        var _a, _b, _c, _d, _e;
        var roleId = ((_a = channel.match(/[0-9]{16,20}/)) !== null && _a !== void 0 ? _a : [""])[0];
        var roleInGuild = context.guild.roles.resolve(roleId);
        if (!roleInGuild)
            return "<span class=\"mention\" title=\"".concat(roleId, "\">Unknown Role</span>");
        if (!roleInGuild.color)
            return "<span class=\"mention\" title=\"".concat(roleInGuild.name, "\">@").concat((_b = roleInGuild.name) !== null && _b !== void 0 ? _b : "Unknown Role", "</span>");
        var rgb = (_c = roleInGuild.color) !== null && _c !== void 0 ? _c : 0;
        var r = (rgb >> 16) & 0xFF;
        var g = (rgb >> 8) & 0xFF;
        var b = rgb & 0xFF;
        var a = 0.1;
        var rgba = "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(a, ")");
        return "<span class=\"mention\" style=\"color: ".concat(roleInGuild.hexColor, "; background-color: ").concat(rgba, ";\" title=\"").concat((_d = roleInGuild === null || roleInGuild === void 0 ? void 0 : roleInGuild.name) !== null && _d !== void 0 ? _d : roleId, "\">@").concat((_e = roleInGuild === null || roleInGuild === void 0 ? void 0 : roleInGuild.name) !== null && _e !== void 0 ? _e : "Unknown Role", "</span>");
    });
    if (allowExtra) {
        content = content
            .replace(/\[(.+?)\]\((.+?)\)/g, "<a href=\"$2\">$1</a>");
    }
    return replyStyle ? content.replace(/(?:\r\n|\r|\n)/g, ' ') : content.replace(/(?:\r\n|\r|\n)/g, '<br />'); // do this last
}
function formatBytes(bytes, decimals) {
    if (decimals === void 0) { decimals = 2; }
    if (bytes === 0)
        return '0 Bytes';
    var k = 1024;
    var dm = decimals < 0 ? 0 : decimals;
    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    var i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}
function validateURL(url) {
    return /[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)?/gi.test(url);
}
exports.default = generateTranscript;
